#!/bin/sh /etc/rc.common
#
# Copyright (C) 2017 Tp-link.com
# Author: Weng Kaiping <wengkaiping@tp-link.net>
# Date: 30Mar17
#

START=99

DEBUG_OUTOUT=0

SERVICE_PATH="/usr/sbin/nrd"
NRD_CONFIG_FILE="/tmp/nrd.conf"

. /lib/functions/nrd-config.sh

nrd_echo() {   
    if [ "$DEBUG_OUTOUT" -gt 0 ]; then
            echo "${1}: ""$2"> /dev/console
	fi
}

generate_config() {
    # Create configuration file and start nrd
    nrd_create_config $NRD_CONFIG_FILE 'AP' 

}


start(){

    local option
    config_load 'nrd'
    config_get_bool enabled config 'Enable' '0'
    config_load sysmode
    config_load onemesh
    config_load wireless
    config_get sysmode sysmode mode "router"
    config_get onemesh_enable onemesh enable "on"
    config_get smart_enable smart smart_enable "off"
	
    config_get ssid_2g ath0 ssid
    config_get password_2g ath0 psk_key
    config_get ssid_5g ath1 ssid
    config_get password_5g ath1 psk_key	
    config_get_bool disabled_2g wifi0 disabled 0
    config_get_bool disabled_all_2g wifi0 disabled_all 0
    config_get_bool disabled_5g wifi1 disabled 0
    config_get_bool disabled_all_5g wifi1 disabled_all 0	
	
	[ "$disabled_2g" = "0" ] && [ "$disabled_all_2g" = "0" ] && [ "$disabled_5g" = "0" ] && [ "$disabled_all_5g" = "0" ] &&
	{
		if [ "$smart_enable" = "off" -a "$ssid_2g" = "$ssid_5g" -a "$password_2g" = "$password_5g" ];then
			smart_enable="on"
		fi
    }
		
    [ "$sysmode" = "router" -a "$onemesh_enable" = "on" ] || [ "$smart_enable" = "on" ] || return 1
    [ "$enabled" -gt 0  ] || return 1
	
	stop
    generate_config

    nrd_echo nrd "starting daemon"	

	if [ "$onemesh_enable" = "on" -a "$smart_enable" = "on" ];then
        option="-o -s"
    elif [ "$onemesh_enable" = "on" -a "$smart_enable" = "off" ];then
        option="-o"
    elif [ "$smart_enable" = "on" ];then
        option="-s"
    else
        option=""
    fi
	
	
    ${SERVICE_PATH} $option -C "$NRD_CONFIG_FILE" &

    # Uncomment this line to send the logs to a file
    #export DBG_APPEND_FILE_PATH=/tmp/nrd.log
    #export DBG_LEVELS=all=DEBUG

}



stop() {
    nrd_echo nrd "stopping"
    local nrd_pid=`ps|grep ${SERVICE_PATH}|grep -v 'grep'|awk '{print $1}'`
    nrd_echo nrd "$nrd_pid"
    if [ -n "$nrd_pid" ];then
        for pid in $nrd_pid; do
            kill -SIGINT "$pid"
        done
    fi
}


reload()
{
    nrd_echo nrd "reload"
    #send message to nrd to update blacklist can be replace by restart
    stop
    start
}

#service_triggers()
#{
#    procd_add_reload_trigger "nrd_blacklist" "nrd" 
#}

