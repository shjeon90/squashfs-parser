#!/usr/bin/lua

local tmpv2 = require "tmpv2"
local json = require "luci.json"
local dbg = require "luci.tools.debug"
local uci  = require "luci.model.uci"
local script = require "sync-script"
local wlan  = require "luci.model.wireless"
local ubus = require "ubus"

local die = script.die
local finalize = script.finalize

local infile = arg[1]
local outfile = arg[2]
local opcode = arg[3]
local onemesh_list_devices = {}
local wifi_data = {}

script.outfile = outfile

local function is_nil_table(data)
    if nil == data then
        return true
    end
    for _, v in pairs(data) do
        return false
    end
    return true
end

local function wireless_status_all(formvalue)
    local form = {"wireless_2g", "wireless_5g"}
    return wlan.Apcfg(form):read()
end

local function request(tmpcli, ip, mac)
	local wpa3_support=false
	dbg.print("enter request(tmpcli),ip " .. ip .. ",mac " .. mac)	

	--dbg.dumptable(onemesh_list_devices)	
	if not onemesh_list_devices or type(onemesh_list_devices) ~= "table" then
		wpa3_support=false
	else
		if not onemesh_list_devices[mac] or type(onemesh_list_devices[mac]) ~= "table" then
			wpa3_support=false
		else
			if not onemesh_list_devices[mac]["wpa3_support"] or 1 ~= onemesh_list_devices[mac]["wpa3_support"] then 
				wpa3_support=false
			else
				wpa3_support=true
			end
		end
	end
	
	--dbg.dumptable(wifi_data)
	if wpa3_support == false then
		if wifi_data ~=nil and wifi_data["2.4G"] ~= nil and wifi_data["2.4G"]["encryption"] == "psk_sae" then
			wifi_data["2.4G"]["encryption"] = "psk"
			wifi_data["2.4G"]["psk_version"] = "rsn"
			wifi_data["2.4G"]["psk_cipher"] = "aes"		
		end
		if wifi_data ~=nil and wifi_data["5G"] ~= nil and wifi_data["5G"]["encryption"] == "psk_sae" then
			wifi_data["5G"]["encryption"] = "psk"
			wifi_data["5G"]["psk_version"] = "rsn"
			wifi_data["5G"]["psk_cipher"] = "aes"		
		end		
	end

	-- Fix Bug 302111 start
	if wifi_data ~=nil and wifi_data["2.4G"] ~= nil and wifi_data["2.4G"]["psk_cipher"] == "tkip" then
		wifi_data["2.4G"]["psk_cipher"] = "auto"		
	end
	if wifi_data ~=nil and wifi_data["5G"] ~= nil and wifi_data["5G"]["psk_cipher"] == "tkip" then
		wifi_data["5G"]["psk_cipher"] = "auto"		
	end	
	-- Fix Bug 302111 end
	
	if wifi_data ~=nil and wifi_data["2.4G"] ~= nil and wifi_data["2.4G"]["encryption"] ~= nil then 
		local wifi_msg = json.encode(wifi_data)
		dbg.print(wifi_msg)

		os.remove(infile)
		local f = io.open(infile, "w")
		f:write(wifi_msg)
		f:close()
	end

    local data, msg = tmpcli:request(opcode, {infile = infile})
    if not data then
        return nil, msg
    end

    if nil ~= data then
        dbg.print("[TPIPF] data is " .. data)
    else
        dbg.print("[TPIPF] data is nil")
    end

    if nil ~= msg then
        dbg.print("[TPIPF] msg is " .. msg)
    else
        dbg.print("[TPIPF] msg is nil")
    end

    local data = json.decode(data)

    return true, data
end

local function main()
    if tonumber(opcode) then
        opcode = tonumber(opcode)
    end
    assert(opcode and infile and outfile, "invalid arguments")
    assert(#arg > 3, "invalid arguments")

	local _ubus = ubus.connect()
	onemesh_list_devices  = _ubus:call("tdpServer", "onemesh_list_devices", {})
	--dbg.dumptable(onemesh_list_devices)	
	--dbg.dumptable(onemesh_list_devices[arg[5]])
	--dbg.print("=========== onemesh_list_devices[arg[5]][\"wpa3_support\"]) ======")	
	--dbg.print(onemesh_list_devices[arg[5]]["wpa3_support"])	

    local fp = io.open(infile, "r")
	if nil == fp then
		wifi_data= nil
    else
        local lines = fp:read("*all")
		fp:close()
		wifi_data = json.decode(lines)
		if is_nil_table(wifi_data) then
			wifi_data= nil
		end
    end	
	
    -- local uci_r = uci.cursor()
    -- local usr = uci_r:get_profile("accountmgnt", "username")
    -- local pwd = uci_r:get_profile("accountmgnt", "password")     

    local data = script.reduce_concurrent(request, nil, nil, arg, 4, #arg)
    finalize(data)
end

dbg.print("========================= /sync-server/request ==============================")
dbg.print("Prog " .. arg[0])
dbg.print("Infile " .. arg[1])
dbg.print("Outfile " .. arg[2])
dbg.print("Opcode " .. arg[3])
dbg.print("IP " .. arg[4])
dbg.print("Mac " .. arg[5])
if nil ~= arg[6] then
	dbg.print("IP " .. arg[6])
end
if nil ~= arg[7] then
	dbg.print("Mac " .. arg[7])
end
if nil ~= arg[8] then
	dbg.print("IP " .. arg[8])
end
if nil ~= arg[9] then
	dbg.print("Mac " .. arg[9])
end
dbg.print("========================= /sync-server/request end ==========================")

script.run(main)
