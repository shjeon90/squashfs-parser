#!/usr/bin/lua

local tmpv2 = require "tmpv2"
local json = require "luci.json"
local dbg = require "luci.tools.debug"
local uci  = require "luci.model.uci"
local script = require "sync-script"
local wlan  = require "luci.model.wireless"
local ubus = require "ubus"

local die = script.die
local finalize = script.finalize

local infile = arg[1]
local outfile = arg[2]
local opcode = arg[3]
local onemesh_list_devices = {}
local wifi_data = {}

script.outfile = outfile

local function wireless_status_all(formvalue)
    local form = {"wireless_2g", "wireless_5g"}
    return wlan.Apcfg(form):read()
end

local function request(tmpcli, ip, mac)
	local wpa3_support=false
	dbg.print("enter request(tmpcli),ip " .. ip .. ",mac " .. mac)	
	
	--dbg.dumptable(onemesh_list_devices)	
	if not onemesh_list_devices or type(onemesh_list_devices) ~= "table" then
		wpa3_support=false
	else
		if not onemesh_list_devices[mac] or type(onemesh_list_devices[mac]) ~= "table" then
			wpa3_support=false
		else
			if not onemesh_list_devices[mac]["wpa3_support"] or 1 ~= onemesh_list_devices[mac]["wpa3_support"] then 
				wpa3_support=false
			else
				wpa3_support=true
			end
		end
	end
	
	--dbg.dumptable(wifi_data)
	if wpa3_support == false then
		if wifi_data ~=nil and wifi_data["2.4G"] ~= nil and wifi_data["2.4G"]["encryption"] == "psk_sae" then
			wifi_data["2.4G"]["encryption"] = "psk"
			wifi_data["2.4G"]["psk_version"] = "rsn"
			wifi_data["2.4G"]["psk_cipher"] = "aes"		
		end
		if wifi_data ~=nil and wifi_data["5G"] ~= nil and wifi_data["5G"]["encryption"] == "psk_sae" then
			wifi_data["5G"]["encryption"] = "psk"
			wifi_data["5G"]["psk_version"] = "rsn"
			wifi_data["5G"]["psk_cipher"] = "aes"		
		end		
	end
	
	-- Fix Bug 302111 start
	if wifi_data ~=nil and wifi_data["2.4G"] ~= nil and wifi_data["2.4G"]["psk_cipher"] == "tkip" then
		wifi_data["2.4G"]["psk_cipher"] = "auto"		
	end
	if wifi_data ~=nil and wifi_data["5G"] ~= nil and wifi_data["5G"]["psk_cipher"] == "tkip" then
		wifi_data["5G"]["psk_cipher"] = "auto"		
	end	
	-- Fix Bug 302111 end
	
	if wifi_data ~=nil and wifi_data["2.4G"] ~= nil and wifi_data["2.4G"]["encryption"] ~= nil then 
		local wifi_msg = json.encode(wifi_data)
		dbg.print(wifi_msg)

		os.remove(infile)
		local f = io.open(infile, "w")
		f:write(wifi_msg)
		f:close()
	end
	
    local data, msg = tmpcli:request(opcode, {infile = infile})
    if not data then
        return nil, msg
    end

    if nil ~= data then
        dbg.print("[TPIPF] data is " .. data)
    else
        dbg.print("[TPIPF] data is nil")
    end

    if nil ~= msg then
        dbg.print("[TPIPF] msg is " .. msg)
    else
        dbg.print("[TPIPF] msg is nil")
    end

    local data = json.decode(data)

    return true, data
end

local function main()	
    if tonumber(opcode) then
        opcode = tonumber(opcode)
    end
    assert(opcode and infile and outfile, "invalid arguments")
    assert(#arg > 3, "invalid arguments")

	local _ubus = ubus.connect()
	onemesh_list_devices  = _ubus:call("tdpServer", "onemesh_list_devices", {})
	--dbg.dumptable(onemesh_list_devices)	
	--dbg.dumptable(onemesh_list_devices[arg[5]])
	--dbg.print("=========== onemesh_list_devices[arg[5]][\"wpa3_support\"]) ======")	
	--dbg.print(onemesh_list_devices[arg[5]]["wpa3_support"])	

    local status_all = wireless_status_all()
    if not status_all or type(status_all) ~= "table" then
        dbg.print("cannot get the wireless status")
        status_all = {["wireless_2g_current_channel"]=-1, ["wireless_5g_current_channel"]=-1}
    end

    local uci_r = uci.cursor()    
    local wifi_24g  = uci_r:get_all("wireless", "ath0")
    local wifi_5g   = uci_r:get_all("wireless", "ath1")
	local wifi_24g_disabled = uci_r:get("wireless", "wifi0", "disabled") or "off"
    local wifi_5g_disabled = uci_r:get("wireless", "wifi1", "disabled") or "off"
	
    local tmp1 = {
        ssid = wifi_24g.ssid,
        encryption =  wifi_24g.encryption,
        psk_version = wifi_24g.psk_version,
        psk_cipher = wifi_24g.psk_cipher,		
        psk_key = wifi_24g.psk_key or "12345678",
        wep_mode = wifi_24g.wep_mode,
        wep_format1 = wifi_24g.wep_format1,
        wep_type1 = wifi_24g.wep_type1,
        wep_key1 = wifi_24g.wep_key1 or "1234567890",
        -- channel  = uci_r:get_all("wireless", "wifi0", "channel"),
        channel = tonumber(status_all["wireless_2g_current_channel"]),
        enable   = (wifi_24g.enable == "on" and wifi_24g_disabled ~= "on") and 1 or 0,
        hide_ssid = (wifi_24g.hidden == "on") and 1 or 0,
        backhaul_ssid = uci_r:get_all("onemesh", "ath03", "ssid"), -- 隐藏backhaul SSID
        backhaul_key  = uci_r:get_all("onemesh", "ath03", "psk_key")   -- 隐藏backhaul 密码
    }
    local tmp2 = {
        ssid = wifi_5g.ssid,
        encryption = wifi_5g.encryption,
        psk_version = wifi_5g.psk_version,
        psk_cipher = wifi_5g.psk_cipher,			
        psk_key = wifi_5g.psk_key or "12345678",
        wep_mode = wifi_5g.wep_mode,
        wep_format1 = wifi_5g.wep_format1,
        wep_type1 = wifi_5g.wep_type1,
        wep_key1 = wifi_5g.wep_key1 or "1234567890",
        -- channel  = uci_r:get_all("wireless", "wifi1", "channel"),
        channel = tonumber(status_all["wireless_5g_current_channel"]),
        enable   = (wifi_5g.enable == "on" and wifi_5g_disabled ~= "on") and 1 or 0,
        hide_ssid = (wifi_5g.hidden == "on") and 1 or 0,
        backhaul_ssid = uci_r:get_all("onemesh", "ath13", "ssid"),  -- 隐藏backhaul SSID
        backhaul_key  = uci_r:get_all("onemesh", "ath13", "psk_key") -- 隐藏backhaul 密码
    }
    wifi_data["2.4G"] = tmp1
    wifi_data["5G"]   = tmp2
	
	
    -- local uci_r = uci.cursor()
    -- local usr = uci_r:get_profile("accountmgnt", "username")
    -- local pwd = uci_r:get_profile("accountmgnt", "password") 	

    local data = script.reduce_concurrent(request, nil, nil, arg, 4, #arg)
    finalize(data)
end

dbg.print("========================= /sync-server/trans_main_wcfg ==============================")
dbg.print("Prog " .. arg[0])
dbg.print("Infile " .. arg[1])
dbg.print("Outfile " .. arg[2])
dbg.print("Opcode " .. arg[3])
dbg.print("IP " .. arg[4])
dbg.print("Mac " .. arg[5])
if nil ~= arg[6] then
	dbg.print("IP " .. arg[6])
end
if nil ~= arg[7] then
	dbg.print("Mac " .. arg[7])
end
if nil ~= arg[8] then
	dbg.print("IP " .. arg[8])
end
if nil ~= arg[9] then
	dbg.print("Mac " .. arg[9])
end
dbg.print("========================= /sync-server/trans_main_wcfg end ==========================")

script.run(main)
