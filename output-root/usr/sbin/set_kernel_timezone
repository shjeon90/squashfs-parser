#!/usr/bin/lua

local uci	= require "luci.model.uci"
local sys	= require "luci.sys"
local nixio = require "nixio"
local json	= require "luci.json"
local dbg = require "luci.tools.debug"
local uci_r = uci.cursor()

local DST_TBL = {'dst_enable', 'start_month', 'start_day', 'start_hour', 'end_month', 'end_day', 'end_hour'}
local DAY_TBL  = {Mon=1, Tues=2, Wed=3, Thur=4, Fri=5, Sat=6, Sun=0}
local MON_TBL  = {Jan=1, Feb=2, Mar=3, Apr=4, May=5, Jun=6, Jul=7, Aug=8, Sep=9, Oct=10, Nov=11, Dec=12}


local function main()
	local function hours12_to_24(data)
		if not data then
			return nil
		end
		local unit = string.sub(data,-2)
		local result = string.sub(data,1,string.len(data)-2)
		result = tonumber(result)
		if unit == "pm" then
			return result + 12
		end
		return result
	end
	
	local dst_status
	local dstdata = {}
	local defaults = {'off', 'Jan', '1st', 'Mon', '1am', 'Jan', '1st', 'Mon', '1am'}
	local cfg_data = uci_r:get_all("system", "dst")
	
	for k, v in ipairs(DST_TBL) do
		dstdata[v] = cfg_data and cfg_data[v] or defaults[k]
	end
	
	-- When daylight saving time starts, the clock goes one hour ahead
	dstdata.start_hour = hours12_to_24(dstdata.start_hour) + 1
	dstdata.start_month = MON_TBL[dstdata.start_month]
	dstdata.start_day = DAY_TBL[dstdata.start_day]

	-- When daylight saving time is over, the clock is set back one hour
	dstdata.end_hour = hours12_to_24(dstdata.end_hour) - 1
	dstdata.end_month = MON_TBL[dstdata.end_month]
	dstdata.end_day = DAY_TBL[dstdata.end_day]

	-- 1 "${hours}" * "${months" "${weeks}" "date -k"
	
	local cmd = "/usr/sbin/set_ktimezone_cron "..dstdata.start_hour.." "..dstdata.start_month.." ".. dstdata.start_day.." "..dstdata.end_hour.." "..dstdata.end_month.." ".. dstdata.end_day
	dbg.print("[set_kernel_timezone] cmd: " .. json.encode(cmd))

	os.execute(cmd)
end

main()


